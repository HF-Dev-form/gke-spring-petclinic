name: CI/CD Pipeline

on:
  push:
    branches: ["master", "main"]

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Setup Google Cloud credentials
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > creds.json
        shell: bash

      - name: Authenticate with gcloud
        run: |
          curl https://sdk.cloud.google.com | bash
          source /home/runner/.bashrc
          gcloud auth activate-service-account --key-file=creds.json
        shell: bash

      - name: Check if cluster exists
        id: cluster_exists
        run: |
          if terraform show -no-color | grep -q 'google_container_cluster.app-cluster'; then
            echo "Cluster already exists. Skipping Terraform init."
            echo "::set-output name=cluster_exists::true"
          else
            echo "Cluster does not exist. Proceeding with Terraform init."
            echo "::set-output name=cluster_exists::false"
          fi

      - name: Terraform Init
        if: steps.cluster_exists.outputs.cluster_exists == 'false'
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Check for changes
        id: changes
        run: |
          if terraform plan | grep -q 'No changes'; then
            echo "No changes found in Terraform plan. Skipping apply."
            echo "::set-output name=has_changes::false"
          else
            echo "Changes found in Terraform plan. Proceeding with apply."
            echo "::set-output name=has_changes::true"
          fi

      - name: Terraform Apply
        if: steps.changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve

      # - name: Retrieve Terraform State
      #   run: terraform state pull -input=false > ${GITHUB_WORKSPACE}/terraform.tfstate

      # - name: Upload Terraform State
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: terraform-state
      #     path: ${GITHUB_WORKSPACE}/terraform.tfstate

  build-and-push:
    needs: [terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Install make
        run: sudo apt-get install make
      - name: Install Pack CLI
        run: |
          sudo add-apt-repository -y ppa:cncf-buildpacks/pack-cli
          sudo apt-get update
          sudo apt-get install -y pack-cli
      - name: Configure pack default builder
        run: pack config default-builder paketobuildpacks/builder:base
      - name: Run Makefile
        run: make all

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Install gcloud components
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Configure Kubernetes context
        run: |
          gcloud container clusters get-credentials app-cluster --zone europe-west1 --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Check if namespace exists
        id: check-namespace
        run: |
          exists=$(kubectl get ns spring-petclinic --ignore-not-found=true -o jsonpath='{.metadata.name}')
          echo "::set-output name=namespace_exists::${exists}"

      - name: Create new namespace
        run: kubectl create ns spring-petclinic
        if: steps.check-namespace.outputs.namespace_exists != 'spring-petclinic'

      - name: Deploy application
        run: kubectl apply -f k8s -n spring-petclinic
